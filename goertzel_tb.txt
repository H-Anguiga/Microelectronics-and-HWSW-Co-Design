 library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity goertzel_tb is
end entity goertzel_tb;

architecture testbench of goertzel_tb is
    constant CLK_PERIOD : time := 250 ns; -- 4 MHz clock

    signal clk      : std_logic := '0';
    signal rst      : std_logic := '0';
    signal start    : std_logic := '0';
    signal valid    : std_logic := '0';
    signal data_in  : std_logic_vector(11 downto 0);
    signal result   : std_logic_vector(19 downto 0);
    signal done     : std_logic;

    -- Instantiate the Goertzel filter
    component goertzel_filter is
        port (
            clk      : in  std_logic;
            rst      : in  std_logic;
            start    : in  std_logic;
            data_in  : in  std_logic_vector(11 downto 0);
            valid    : in  std_logic;
            result   : out std_logic_vector(19 downto 0);
            done     : out std_logic
        );
    end component;

    signal sample_count : integer := 0;
    type test_data_type is array (integer range <>) of std_logic_vector(11 downto 0);
    signal test_data : test_data_type(0 to 134);

begin

    -- Clock generation
    clk_gen: process
    begin
        while true loop
            clk <= '0';
            wait for CLK_PERIOD / 2;
            clk <= '1';
            wait for CLK_PERIOD / 2;
        end loop;
    end process clk_gen;

    -- Reset and start sequence
    rst_start_process: process
    begin
        rst <= '1';
        wait for CLK_PERIOD * 10;
        rst <= '0';
        start <= '1';
        wait for CLK_PERIOD * 10;
        start <= '0';
    end process rst_start_process;

    -- Read test data from file into array
read_data: process
    file data_file : text open read_mode is "test_data.txt";
    variable line : line;
    variable value : integer;
begin
    wait until rst = '0';
    wait until start = '1';

    for i in 0 to 134 loop
        readline(data_file, line);
        read(line, value);
        test_data(i) <= std_logic_vector(to_unsigned(value, 12));
    end loop;

    wait;
end process read_data;


    -- Instantiate Goertzel filter
    goertzel_inst: goertzel_filter
        port map (
            clk => clk,
            rst => rst,
            start => start,
            data_in => data_in,
            valid => valid,
            result => result,
            done => done
        );

    -- Apply test data to the Goertzel filter
    apply_test_data: process(clk)
    begin
        if rising_edge(clk) then
            if rst = '0' and start = '1' then
                if sample_count < 135 then
                    data_in <= test_data(sample_count);
                    valid <= '1';
                    sample_count <= sample_count + 1;
                else
                    valid <= '0';
                end if;
            end if;
        end if;
    end process apply_test_data;

end architecture testbench;
